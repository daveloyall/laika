require File.dirname(__FILE__) + '/../spec_helper'
describe GenerateAndFormatPlan do
  describe "with schematron validation stubbed out" do
    before do
      @validator = stub(:validator)
      @validator.stub!(:contains_kind_of?).and_return(false)
      Validation.stub!(:get_validator).and_return(@validator)
    end

    describe "to return an empty list" do
      before do
        @validator.should_receive(:validate).and_return([])
      end

      it "should pass validation" do
        plan = GenerateAndFormatPlan.factory.create \
          :clinical_document => ClinicalDocument.factory.create
        plan.validate_clinical_document_content
        plan.should be_passed
      end
    end

    describe "to return a non-empty list" do
      before do
        @validator.should_receive(:validate).and_return([validation_error_stub])
      end

      it "should fail validation" do
        plan = GenerateAndFormatPlan.factory.create \
          :clinical_document => ClinicalDocument.factory.create
        plan.validate_clinical_document_content
        plan.should be_failed
      end
    end
  end
  
  describe "when showing errors in the document XML" do
    before do
      @doc = REXML::Document.new StringIO.new <<-XML
      <ClinicalDocument xmlns="urn:hl7-org:v3">
         <structuredBody>
            <component>
               <section>
                 <thingy/>
               </section>
             </component>
          </structuredBody>
      </ClinicalDocument>
XML
    end
    
    it "should find errors generated by C32 validation" do
      location = '/ClinicalDocument/structuredBody/component/section/thingy'
      plan = GenerateAndFormatPlan.factory.create(:content_errors  => 
        [ContentError.factory.create(:location => location)])
      error_map, error_attributes = plan.match_errors(@doc)
      error_map[location].should_not be_nil
      error_map[location].should == '0'
      element = REXML::XPath.first(@doc ,location)
      element.name.should == 'thingy'
      element.attributes['error_id'].should == '0'
    end
    
    it "should find errors with funky XPath expressions generated by schematron" do
      location = "/*:ClinicalDocument[namespace-uri()='urn:hl7-org:v3'][1]/*:structuredBody[namespace-uri()='urn:hl7-org:v3'][1]/*:component[namespace-uri()='urn:hl7-org:v3'][1]//*:section[namespace-uri()='urn:hl7-org:v3'][1]/*:thingy[namespace-uri()='urn:hl7-org:v3'][1]"
      plan = GenerateAndFormatPlan.factory.create(:content_errors  => 
        [ContentError.factory.create(:location => location)])
      error_map, error_attributes = plan.match_errors(@doc)
      error_map[location].should_not be_nil
      error_map[location].should == '0'
      element = REXML::XPath.first(@doc ,'/ClinicalDocument/structuredBody/component/section/thingy')
      element.name.should == 'thingy'
      element.attributes['error_id'].should == '0'
    end
  end
end

