<% if @condition.new_record?
  condition_div = 'conditionNew' -%>
<div id="conditionNew">
<% else
     condition_div = "condition#{@condition.id}"
   end %>
<% patient_form_for([@patient, @condition], :update => condition_div, :name => "conditions_form") do |f| -%>
  <table>
    <%= f.calendar_date_select :start_event %>
    <%= f.calendar_date_select :end_event %>
    <%= f.select :problem_type_id, ProblemType.select_options, {:include_blank => true} %>
	  <%= f.table_field :problem_name,
          auto_complete_stylesheet + 
          text_field(:condition, :problem_name) + 
          content_tag(:div, nil, 'id' => "condition_problem_name_auto_complete", 'class' => "auto_complete")  +
          auto_complete_field(:condition_problem_name, :url => auto_complete_for_snowmed_problem_name_path, :method => :get, :param_name => 'snowmed_problem[name]')
      # XXX if we intend to generalize auto completion features for other fields which,
      # like condition.problem_name auto complete against a completely different table's
      # field (snowmed_problem.name, in this case) then we should turn the above into a helper.
      # The auto_complete plugin is built for slightly more straight forward cases where
      # you are auto-completing from the obect.method's column itself rather than a separate
      # lookup table.
    %>
    <%= f.submit("Save") %>
    <%= f.table_controls link_to_function('Cancel',
      @condition.new_record? ?
        %{ $('#{condition_div}').remove(); } :
        %{
          new Ajax.Updater('#{condition_div}',
            '#{patient_condition_url(@patient, @condition)}',
            {method:'get'})
        }) %>
</table>
<% end %>
<% if @condition.new_record? -%>
</div>
<% end -%>
